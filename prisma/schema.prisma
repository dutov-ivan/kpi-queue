generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                @id @default(autoincrement())
  avatar                   String?            @db.VarChar(100)
  firstName                String             @db.VarChar(100)
  lastName                 String             @db.VarChar(100)
  email                    String             @db.VarChar(100) @unique
  password                 String             @db.VarChar(100)
  groupParticipantAccounts GroupParticipant[]
  groupInvitations              GroupInvitation[]
  queueInvitations              QueueInvitation[]
}

model Group {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(250)
  description       String?            @db.VarChar(500)
  isPublic         Boolean            @default(false)
  groupParticipants GroupParticipant[]
  invitations      GroupInvitation[]
}

model GroupInvitation {
  id                Int                @id @default(autoincrement())
  groupId           Int
  email            String           @db.VarChar(100)
  userId            Int?
  group             Group              @relation(fields: [groupId], references: [id])
  invitedUser             User?               @relation(fields: [userId], references: [id])
  createdAt         DateTime           @default(now())
  isAccepted       Boolean?           
}

model QueueInvitation {
  id                Int                @id @default(autoincrement())
  queueId           Int
  email            String           @db.VarChar(100)
  userId            Int?
  queue             Queue              @relation("Invitations", fields: [queueId], references: [id])
  invitedUser             User?               @relation(fields: [userId], references: [id])
  createdAt         DateTime           @default(now())
  isAccepted       Boolean?           
}

model GroupParticipant {
  id                Int                @id @default(autoincrement())
  role              Role
  userId            Int
  groupId           Int
  group             Group              @relation(fields: [groupId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  queueParticipants QueueParticipant[]
  queueStarter      Queue[]            @relation("QueueStarter")

  @@unique([userId, groupId])
}

enum Role {
  Admin
  Participant
}


model Queue {
  id           Int                @id @default(autoincrement())
  name        String             @db.VarChar(250)
  description String?            @db.VarChar(500)
  createdAt   DateTime           @default(now())
  startedAt   DateTime?
  startFromId Int?
  startFrom GroupParticipant? @relation("QueueStarter", fields: [startFromId], references: [id])
  startStrategy QueueStartStrategy
  stepStrategy QueueStepStrategy
  isParticipationAllowedPostStart Boolean @default(false)
  participants QueueParticipant[]
  invitations  QueueInvitation[] @relation("Invitations")
}

enum QueueStartStrategy {
  Time
  Manual
}

enum QueueStepStrategy {
  ByName
  ByNameReverse
  FIFO
  Manual
}


model QueueParticipant {
  id                 Int              @id @default(autoincrement())
  acceptedAt         DateTime         @default(now())
  queueId            Int
  groupParticipantId Int
  groupParticipant   GroupParticipant @relation(fields: [groupParticipantId], references: [id])
  queue              Queue            @relation(fields: [queueId], references: [id])
}